const pool = require('../config/db');

const getAllVulnerabilities = async () => {
    const result = await pool.query('SELECT * FROM vulnerabilities ORDER BY reported_at DESC');
    return result.rows;
};

/**
 * Paginated & filtered vulnerabilities retrieval.
 * @param {Object} opts
 * @param {number} opts.page - 1-based page number
 * @param {number} opts.pageSize - items per page
 * @param {string} [opts.severity]
 * @param {string} [opts.status]
 * @param {string} [opts.search] - case-insensitive search across name & description
 * @returns {{ data: any[], page: number, pageSize: number, total: number, totalPages: number }}
 */
const getVulnerabilities = async ({ page, pageSize, severity, status, search }) => {
    const where = [];
    const values = [];
    let i = 1;
    if (severity) {
        where.push(`severity = $${i++}`);
        values.push(severity);
    }
    if (status) {
        where.push(`status = $${i++}`);
        values.push(status);
    }
    if (search) {
        where.push(`(name ILIKE $${i} OR description ILIKE $${i})`);
        values.push(`%${search}%`);
        i++;
    }
    const whereClause = where.length ? `WHERE ${where.join(' AND ')}` : '';

    // Total count
    const countResult = await pool.query(`SELECT COUNT(*) FROM vulnerabilities ${whereClause}`.trim(), values);
    const total = parseInt(countResult.rows[0].count, 10);

    // Data page
    values.push(pageSize, (page - 1) * pageSize);
    const listResult = await pool.query(
        `SELECT * FROM vulnerabilities ${whereClause} ORDER BY reported_at DESC LIMIT $${i} OFFSET $${i + 1}`.trim(),
        values
    );

    return {
        data: listResult.rows,
        page,
        pageSize,
        total,
        totalPages: Math.ceil(total / pageSize) || 0,
    };
};

const getVulnerabilityById = async (id) => {
    const result = await pool.query('SELECT * FROM vulnerabilities WHERE id = $1', [id]);
    return result.rows[0];
};

const addVulnerability = async (name, description, severity, status) => {
    const result = await pool.query(
        'INSERT INTO vulnerabilities (name, description, severity, status) VALUES ($1, $2, $3, $4) RETURNING *',
        [name, description, severity, status]
    );
    return result.rows[0];
};

const updateVulnerability = async (id, name, description, severity, status) => {
    const result = await pool.query(
        'UPDATE vulnerabilities SET name = $1, description = $2, severity = $3, status = $4 WHERE id = $5 RETURNING *',
        [name, description, severity, status, id]
    );
    return result.rows[0];
};

const deleteVulnerability = async (id) => {
    const result = await pool.query('DELETE FROM vulnerabilities WHERE id = $1 RETURNING *', [id]);
    return result.rows[0];
};

module.exports = {
    getAllVulnerabilities,
    getVulnerabilities,
    getVulnerabilityById,
    addVulnerability,
    updateVulnerability,
    deleteVulnerability,
};
