services:
  backend:
    build: ./backend
    ports:
      - "3001:3001" # dev (removed in prod override)
    env_file:
      - ./.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      FRONTEND_ORIGIN: ${FRONTEND_ORIGIN}
    volumes:
      - backend_logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - internal
      - public
  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  frontend:
    build:
      context: ./frontend
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL}
    ports:
      - "5173:80" # dev (removed in prod override)
    env_file:
      - ./.env
    depends_on:
      - backend
    networks:
      - public
volumes:
  postgres_data:
  backend_logs:
networks:
  public:
  internal:
    internal: true