"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import { Textarea } from "@/components/ui/textarea"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { useState } from "react"

// Mock data - in real app this would come from API
const mockVulnerability = {
  id: "VUL-001",
  title: "SQL Injection in User Authentication",
  severity: "Critical",
  status: "Open",
  assignee: "John Doe",
  reporter: "Security Scanner",
  dateFound: "2024-01-15",
  lastUpdated: "2024-01-16",
  description: `A critical SQL injection vulnerability has been discovered in the user authentication module. The vulnerability exists in the login form where user input is not properly sanitized before being passed to the database query.

**Technical Details:**
- Location: /auth/login.php line 45
- Parameter: username field
- Impact: Complete database access, user data exposure
- CVSS Score: 9.8 (Critical)

**Proof of Concept:**
Username: admin' OR '1'='1' --
Password: anything

This allows bypassing authentication and gaining administrative access to the system.`,

  attachments: [
    { name: "vulnerability_report.pdf", size: "2.4 MB", type: "PDF" },
    { name: "poc_screenshot.png", size: "1.1 MB", type: "Image" },
    { name: "code_analysis.txt", size: "15 KB", type: "Text" },
  ],

  comments: [
    {
      id: 1,
      author: "John Doe",
      avatar: "JD",
      timestamp: "2024-01-16 10:30 AM",
      content:
        "I've started investigating this vulnerability. Initial analysis confirms the SQL injection vector. Working on a patch now.",
    },
    {
      id: 2,
      author: "Sarah Johnson",
      avatar: "SJ",
      timestamp: "2024-01-16 2:15 PM",
      content:
        "Please prioritize this - it's a critical security issue that could lead to complete system compromise. Let me know if you need additional resources.",
    },
  ],
}

const getSeverityColor = (severity: string) => {
  switch (severity) {
    case "Critical":
      return "destructive"
    case "High":
      return "destructive"
    case "Medium":
      return "secondary"
    case "Low":
      return "outline"
    default:
      return "outline"
  }
}

const getStatusColor = (status: string) => {
  switch (status) {
    case "Open":
      return "destructive"
    case "In Progress":
      return "secondary"
    case "Resolved":
      return "default"
    case "Closed":
      return "outline"
    default:
      return "outline"
  }
}

export function VulnerabilityDetail({ vulnerabilityId }: { vulnerabilityId: string }) {
  const [newComment, setNewComment] = useState("")
  const [comments, setComments] = useState(mockVulnerability.comments)

  const handleAddComment = () => {
    if (newComment.trim()) {
      const comment = {
        id: comments.length + 1,
        author: "Current User",
        avatar: "CU",
        timestamp: new Date().toLocaleString(),
        content: newComment,
      }
      setComments([...comments, comment])
      setNewComment("")
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-start justify-between">
        <div>
          <div className="flex items-center space-x-2 mb-2">
            <h1 className="text-3xl font-bold text-foreground">{mockVulnerability.title}</h1>
            <Badge variant={getSeverityColor(mockVulnerability.severity)}>{mockVulnerability.severity}</Badge>
          </div>
          <p className="text-muted-foreground">Vulnerability ID: {mockVulnerability.id}</p>
        </div>

        <div className="flex space-x-2">
          <Button variant="outline">Edit</Button>
          <Button>Update Status</Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Content */}
        <div className="lg:col-span-2 space-y-6">
          {/* Description */}
          <Card>
            <CardHeader>
              <CardTitle>Description</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="prose prose-sm max-w-none">
                <pre className="whitespace-pre-wrap text-sm text-foreground font-sans">
                  {mockVulnerability.description}
                </pre>
              </div>
            </CardContent>
          </Card>

          {/* Attachments */}
          <Card>
            <CardHeader>
              <CardTitle>Attachments</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {mockVulnerability.attachments.map((attachment, index) => (
                  <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className="w-8 h-8 bg-muted rounded flex items-center justify-center">
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                          />
                        </svg>
                      </div>
                      <div>
                        <p className="text-sm font-medium">{attachment.name}</p>
                        <p className="text-xs text-muted-foreground">
                          {attachment.type} â€¢ {attachment.size}
                        </p>
                      </div>
                    </div>
                    <Button variant="outline" size="sm">
                      Download
                    </Button>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Comments */}
          <Card>
            <CardHeader>
              <CardTitle>Comments & Updates</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {comments.map((comment) => (
                <div key={comment.id} className="flex space-x-3">
                  <Avatar className="w-8 h-8">
                    <AvatarImage src="/placeholder.svg" />
                    <AvatarFallback>{comment.avatar}</AvatarFallback>
                  </Avatar>
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-1">
                      <p className="text-sm font-medium">{comment.author}</p>
                      <p className="text-xs text-muted-foreground">{comment.timestamp}</p>
                    </div>
                    <p className="text-sm text-foreground">{comment.content}</p>
                  </div>
                </div>
              ))}

              <Separator />

              <div className="space-y-3">
                <Textarea
                  placeholder="Add a comment..."
                  value={newComment}
                  onChange={(e) => setNewComment(e.target.value)}
                  rows={3}
                />
                <Button onClick={handleAddComment} disabled={!newComment.trim()}>
                  Add Comment
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Status Information */}
          <Card>
            <CardHeader>
              <CardTitle>Status Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Status</p>
                <Badge variant={getStatusColor(mockVulnerability.status)} className="mt-1">
                  {mockVulnerability.status}
                </Badge>
              </div>

              <div>
                <p className="text-sm font-medium text-muted-foreground">Severity</p>
                <Badge variant={getSeverityColor(mockVulnerability.severity)} className="mt-1">
                  {mockVulnerability.severity}
                </Badge>
              </div>

              <div>
                <p className="text-sm font-medium text-muted-foreground">Assigned To</p>
                <p className="text-sm text-foreground mt-1">{mockVulnerability.assignee}</p>
              </div>

              <div>
                <p className="text-sm font-medium text-muted-foreground">Reported By</p>
                <p className="text-sm text-foreground mt-1">{mockVulnerability.reporter}</p>
              </div>

              <div>
                <p className="text-sm font-medium text-muted-foreground">Date Found</p>
                <p className="text-sm text-foreground mt-1">{mockVulnerability.dateFound}</p>
              </div>

              <div>
                <p className="text-sm font-medium text-muted-foreground">Last Updated</p>
                <p className="text-sm text-foreground mt-1">{mockVulnerability.lastUpdated}</p>
              </div>
            </CardContent>
          </Card>

          {/* Quick Actions */}
          <Card>
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              <Button variant="outline" className="w-full justify-start bg-transparent">
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
                  />
                </svg>
                Edit Vulnerability
              </Button>

              <Button variant="outline" className="w-full justify-start bg-transparent">
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                  />
                </svg>
                Assign to User
              </Button>

              <Button variant="outline" className="w-full justify-start bg-transparent">
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"
                  />
                </svg>
                Change Status
              </Button>

              <Button variant="outline" className="w-full justify-start bg-transparent">
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                  />
                </svg>
                Export Report
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
