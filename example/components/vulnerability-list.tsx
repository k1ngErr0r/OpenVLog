"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

const mockVulnerabilities = [
  {
    id: "VUL-001",
    title: "SQL Injection in User Authentication",
    severity: "Critical",
    status: "Open",
    assignee: "John Doe",
    dateFound: "2024-01-15",
    lastUpdated: "2024-01-16",
    description: "SQL injection vulnerability found in login form allowing unauthorized access",
  },
  {
    id: "VUL-002",
    title: "Cross-Site Scripting (XSS) in Contact Form",
    severity: "High",
    status: "In Progress",
    assignee: "Sarah Johnson",
    dateFound: "2024-01-14",
    lastUpdated: "2024-01-15",
    description: "Stored XSS vulnerability in contact form comments field",
  },
  {
    id: "VUL-003",
    title: "Insecure Direct Object Reference",
    severity: "Medium",
    status: "Resolved",
    assignee: "Mike Wilson",
    dateFound: "2024-01-10",
    lastUpdated: "2024-01-14",
    description: "Users can access other users' data by manipulating URL parameters",
  },
  {
    id: "VUL-004",
    title: "Missing HTTPS Redirect",
    severity: "Low",
    status: "Open",
    assignee: "Lisa Chen",
    dateFound: "2024-01-12",
    lastUpdated: "2024-01-13",
    description: "Some pages don't redirect HTTP traffic to HTTPS",
  },
  {
    id: "VUL-005",
    title: "Weak Password Policy",
    severity: "Medium",
    status: "Closed",
    assignee: "David Brown",
    dateFound: "2024-01-08",
    lastUpdated: "2024-01-12",
    description: "Password requirements are too weak, allowing easily guessable passwords",
  },
]

const getSeverityColor = (severity: string) => {
  switch (severity) {
    case "Critical":
      return "destructive"
    case "High":
      return "destructive"
    case "Medium":
      return "secondary"
    case "Low":
      return "outline"
    default:
      return "outline"
  }
}

const getStatusColor = (status: string) => {
  switch (status) {
    case "Open":
      return "destructive"
    case "In Progress":
      return "secondary"
    case "Resolved":
      return "default"
    case "Closed":
      return "outline"
    default:
      return "outline"
  }
}

export function VulnerabilityList() {
  const [searchTerm, setSearchTerm] = useState("")
  const [severityFilter, setSeverityFilter] = useState("all")
  const [statusFilter, setStatusFilter] = useState("all")

  const filteredVulnerabilities = mockVulnerabilities.filter((vuln) => {
    const matchesSearch =
      vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.id.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesSeverity = severityFilter === "all" || vuln.severity === severityFilter
    const matchesStatus = statusFilter === "all" || vuln.status === statusFilter

    return matchesSearch && matchesSeverity && matchesStatus
  })

  return (
    <Card>
      <CardHeader>
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <CardTitle>All Vulnerabilities</CardTitle>
          <Button asChild>
            <a href="/vulnerabilities/add">Add New Vulnerability</a>
          </Button>
        </div>

        <div className="flex flex-col sm:flex-row gap-4 mt-4">
          <div className="flex-1">
            <Input
              placeholder="Search vulnerabilities..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="max-w-sm"
            />
          </div>

          <div className="flex gap-2">
            <Select value={severityFilter} onValueChange={setSeverityFilter}>
              <SelectTrigger className="w-[140px]">
                <SelectValue placeholder="Severity" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severities</SelectItem>
                <SelectItem value="Critical">Critical</SelectItem>
                <SelectItem value="High">High</SelectItem>
                <SelectItem value="Medium">Medium</SelectItem>
                <SelectItem value="Low">Low</SelectItem>
              </SelectContent>
            </Select>

            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-[140px]">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Statuses</SelectItem>
                <SelectItem value="Open">Open</SelectItem>
                <SelectItem value="In Progress">In Progress</SelectItem>
                <SelectItem value="Resolved">Resolved</SelectItem>
                <SelectItem value="Closed">Closed</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
      </CardHeader>

      <CardContent>
        <div className="rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>ID</TableHead>
                <TableHead>Title</TableHead>
                <TableHead>Severity</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Assignee</TableHead>
                <TableHead>Date Found</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredVulnerabilities.map((vulnerability) => (
                <TableRow key={vulnerability.id}>
                  <TableCell className="font-mono text-sm">{vulnerability.id}</TableCell>
                  <TableCell>
                    <div>
                      <div className="font-medium">{vulnerability.title}</div>
                      <div className="text-sm text-muted-foreground truncate max-w-xs">{vulnerability.description}</div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge variant={getSeverityColor(vulnerability.severity)}>{vulnerability.severity}</Badge>
                  </TableCell>
                  <TableCell>
                    <Badge variant={getStatusColor(vulnerability.status)}>{vulnerability.status}</Badge>
                  </TableCell>
                  <TableCell>{vulnerability.assignee}</TableCell>
                  <TableCell>{vulnerability.dateFound}</TableCell>
                  <TableCell>
                    <Button variant="outline" size="sm" asChild>
                      <a href={`/vulnerabilities/${vulnerability.id}`}>View Details</a>
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>

        {filteredVulnerabilities.length === 0 && (
          <div className="text-center py-8">
            <p className="text-muted-foreground">No vulnerabilities found matching your criteria.</p>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
