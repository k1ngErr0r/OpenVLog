import { type ColumnDef, type CellContext } from '@tanstack/react-table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';
import { useNavigate } from 'react-router-dom';
import type { Vulnerability } from '@/types';

interface Options {
  onDelete: (id: number) => void;
}

export function useVulnerabilityColumns({ onDelete }: Options): ColumnDef<Vulnerability>[] {
  const navigate = useNavigate();
  return [
    { accessorKey: 'name', header: 'Name' },
    { accessorKey: 'description', header: 'Description' },
  { accessorKey: 'severity', header: 'Severity', cell: ({ row }: CellContext<Vulnerability, unknown>) => {
        const severity = row.getValue('severity') as string;
        const variant = ({
          Critical: 'destructive',
          High: 'destructive',
          Medium: 'secondary',
          Low: 'outline',
          Informational: 'outline',
        } as const)[severity] as any;
        return <Badge variant={variant}>{severity}</Badge>;
      }
    },
  { accessorKey: 'status', header: 'Status', cell: ({ row }: CellContext<Vulnerability, unknown>) => {
        const status = row.getValue('status') as string;
        return <Badge>{status}</Badge>;
      }
    },
  { accessorKey: 'reported_at', header: 'Reported At', cell: ({ row }: CellContext<Vulnerability, unknown>) => {
        const date = new Date(row.getValue('reported_at') as string);
        return date.toLocaleString();
      }
    },
  { id: 'actions', cell: ({ row }: CellContext<Vulnerability, unknown>) => {
        const vulnerability = row.original;
        return (
          <div className="space-x-2">
            <Button variant="outline" size="sm" onClick={() => navigate(`/vulnerabilities/${vulnerability.id}/edit`)}>Edit</Button>
            <AlertDialog>
              <AlertDialogTrigger asChild>
                <Button variant="destructive" size="sm">Delete</Button>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                  <AlertDialogDescription>This action cannot be undone. This will permanently delete the vulnerability.</AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel>Cancel</AlertDialogCancel>
                  <AlertDialogAction onClick={() => onDelete(vulnerability.id)}>Delete</AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
          </div>
        );
      }
    },
  ];
}
