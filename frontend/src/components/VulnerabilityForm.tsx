import { useNavigate } from "react-router-dom";
// Use centralized API client
import api from "@/lib/http";
import { useToast } from '@/components/ui/use-toast';
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { VulnerabilityAttachments } from '@/components/VulnerabilityAttachments';

const formSchema = z.object({
  name: z.string().min(1, { message: "Name is required" }),
  description: z.string().optional(),
  severity: z.string().min(1, { message: "Severity is required" }),
  status: z.string().min(1, { message: "Status is required" }),
});

interface VulnerabilityFormProps {
  vulnerability?: z.infer<typeof formSchema> & { id?: number };
}

export function VulnerabilityForm({ vulnerability }: VulnerabilityFormProps) {
  const navigate = useNavigate();
  const toast = useToast().push;
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: vulnerability?.name || "",
      description: vulnerability?.description || "",
      severity: vulnerability?.severity || "Medium",
      status: vulnerability?.status || "Open",
    },
  });

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    try {
      if (vulnerability?.id) {
        await api.put(`/api/vulnerabilities/${vulnerability.id}`, values);
        toast.success('Vulnerability updated.');
        navigate('/');
      } else {
        const res = await api.post(`/api/vulnerabilities`, values);
        const newId = res.data?.id;
        toast.success('Vulnerability created. You can now add attachments.');
        if (newId) {
          navigate(`/vulnerabilities/${newId}/edit`);
        } else {
          navigate('/');
        }
      }
    } catch (err: any) {
      const status = err?.response?.status;
      const message = status === 403 ? 'Forbidden: admin role required.' : (err?.response?.data?.message || 'Failed to save vulnerability');
      form.setError("root", { message });
      console.error(err);
    }
  };

  return (
  <div className="ov-panel-flat p-8 w-full max-w-3xl ov-animate-panel">
      <div className="mb-8">
        <h1 className="ov-heading text-3xl">
          {vulnerability ? "Edit Vulnerability" : "Add Vulnerability"}
        </h1>
        <p className="mt-2 text-sm text-white/50">
          {vulnerability ? "Update the details for this vulnerability." : "Provide details for the new vulnerability."}
        </p>
      </div>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <FormField
            control={form.control}
            name="name"
            render={({ field }: any) => (
              <FormItem className="space-y-2">
                <FormLabel className="ov-form-label">Title</FormLabel>
                <FormControl>
                  <Input placeholder="SQL Injection in Login" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="grid gap-6 md:grid-cols-2">
            <FormField
              control={form.control}
              name="severity"
              render={({ field }: any) => (
                <FormItem className="space-y-2">
                  <FormLabel className="ov-form-label">Severity</FormLabel>
                  <Select onValueChange={field.onChange} value={field.value}>
                    <FormControl>
                      <SelectTrigger className="ov-input-base">
                        <SelectValue placeholder="Select" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="Critical">Critical</SelectItem>
                      <SelectItem value="High">High</SelectItem>
                      <SelectItem value="Medium">Medium</SelectItem>
                      <SelectItem value="Low">Low</SelectItem>
                      <SelectItem value="Informational">Informational</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="status"
              render={({ field }: any) => (
                <FormItem className="space-y-2">
                  <FormLabel className="ov-form-label">Status</FormLabel>
                  <Select onValueChange={field.onChange} value={field.value}>
                    <FormControl>
                      <SelectTrigger className="ov-input-base">
                        <SelectValue placeholder="Select" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="Open">Open</SelectItem>
                      <SelectItem value="In Progress">In Progress</SelectItem>
                      <SelectItem value="Resolved">Resolved</SelectItem>
                      <SelectItem value="Closed">Closed</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="description"
            render={({ field }: any) => (
              <FormItem className="space-y-2">
                <FormLabel className="ov-form-label">Description</FormLabel>
                <FormControl>
                  <Textarea placeholder="Describe the vulnerability, impact, and reproduction steps..." className="min-h-36 ov-input-base" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          {form.formState.errors.root && (
            <p className="text-sm text-red-400">{form.formState.errors.root.message}</p>
          )}
          <div className="flex gap-3 pt-2">
            <Button type="submit" variant="primaryBlue" disabled={form.formState.isSubmitting}>
              {vulnerability ? "Save Changes" : "Create Vulnerability"}
            </Button>
            <Button type="button" variant="outline" onClick={() => navigate(-1)}>
              Cancel
            </Button>
          </div>
        </form>
      </Form>
      {vulnerability?.id && (
        <div className="mt-10 border-t border-white/5 pt-8">
          <VulnerabilityAttachments vulnerabilityId={vulnerability.id} />
        </div>
      )}
    </div>
  );
}