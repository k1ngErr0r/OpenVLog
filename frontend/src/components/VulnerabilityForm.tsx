import { useNavigate } from "react-router-dom";
// Use centralized API client
import api from "@/lib/http";
import { useToast } from '@/components/ui/toast';
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

const formSchema = z.object({
  name: z.string().min(1, { message: "Name is required" }),
  description: z.string().optional(),
  severity: z.string().min(1, { message: "Severity is required" }),
  status: z.string().min(1, { message: "Status is required" }),
});

interface VulnerabilityFormProps {
  vulnerability?: z.infer<typeof formSchema> & { id?: number };
}

export function VulnerabilityForm({ vulnerability }: VulnerabilityFormProps) {
  const navigate = useNavigate();
  const { push } = useToast();
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: vulnerability?.name || "",
      description: vulnerability?.description || "",
      severity: vulnerability?.severity || "Medium",
      status: vulnerability?.status || "Open",
    },
  });

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    try {
      if (vulnerability?.id) {
        await api.put(`/api/vulnerabilities/${vulnerability.id}`, values);
      } else {
        await api.post(`/api/vulnerabilities`, values);
      }
      push({ type: 'success', message: vulnerability ? 'Vulnerability updated.' : 'Vulnerability added.' });
      navigate("/");
    } catch (err: any) {
      const status = err?.response?.status;
      const message = status === 403 ? 'Forbidden: admin role required.' : (err?.response?.data?.message || 'Failed to save vulnerability');
      form.setError("root", { message });
      console.error(err);
    }
  };

  return (
    <Card className="w-full max-w-lg">
      <CardHeader>
        <CardTitle className="text-2xl">
          {vulnerability ? "Edit Vulnerability" : "Add New Vulnerability"}
        </CardTitle>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            <FormField
              control={form.control}
              name="name"
              render={({ field }: any) => (
                <FormItem>
                  <FormLabel>Name</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Cross-Site Scripting" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="description"
              render={({ field }: any) => (
                <FormItem>
                  <FormLabel>Description</FormLabel>
                  <FormControl>
                    <Textarea placeholder="Describe the vulnerability..." {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="severity"
              render={({ field }: any) => (
                <FormItem>
                  <FormLabel>Severity</FormLabel>
                  <Select onValueChange={field.onChange} value={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select severity" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="Critical">Critical</SelectItem>
                      <SelectItem value="High">High</SelectItem>
                      <SelectItem value="Medium">Medium</SelectItem>
                      <SelectItem value="Low">Low</SelectItem>
                      <SelectItem value="Informational">Informational</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="status"
              render={({ field }: any) => (
                <FormItem>
                  <FormLabel>Status</FormLabel>
                  <Select onValueChange={field.onChange} value={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select status" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="Open">Open</SelectItem>
                      <SelectItem value="In Progress">In Progress</SelectItem>
                      <SelectItem value="Resolved">Resolved</SelectItem>
                      <SelectItem value="Closed">Closed</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            {form.formState.errors.root && (
              <p className="text-red-500 text-sm">{form.formState.errors.root.message}</p>
            )}
            <Button type="submit" disabled={form.formState.isSubmitting}>
              {vulnerability ? "Update Vulnerability" : "Add Vulnerability"}
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}