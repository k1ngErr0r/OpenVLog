import { useEffect, useState, useRef } from 'react';
import { useApiWithToasts } from '@/lib/http';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Spinner } from '@/components/ui/spinner';
import { Trash2, Download, Paperclip, UploadCloud } from 'lucide-react';
import { isAdmin } from '@/lib/auth';

interface Attachment {
    id: number;
    file_name: string;
    file_size: number;
    mime_type: string;
}

interface VulnerabilityAttachmentsProps {
    vulnerabilityId: number;
}

function formatBytes(bytes: number, decimals = 2) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

export function VulnerabilityAttachments({ vulnerabilityId }: VulnerabilityAttachmentsProps) {
    const [attachments, setAttachments] = useState<Attachment[]>([]);
    const [loading, setLoading] = useState(true);
    const [uploading, setUploading] = useState(false);
    const api = useApiWithToasts();
    const fileInputRef = useRef<HTMLInputElement>(null);

    const fetchAttachments = async () => {
        setLoading(true);
        try {
            const response = await api.get(`/api/vulnerabilities/${vulnerabilityId}/attachments`);
            setAttachments(response.data);
        } catch (error) {
            console.error("Error fetching attachments:", error);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        if (vulnerabilityId) {
            fetchAttachments();
        }
    }, [vulnerabilityId]);

    const handleUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) return;

        const formData = new FormData();
        formData.append('attachment', file);
        setUploading(true);

        try {
            await api.post(`/api/vulnerabilities/${vulnerabilityId}/attachments`, formData);
            fetchAttachments(); // Refresh the list
        } catch (error) {
            console.error("Error uploading file:", error);
        } finally {
            setUploading(false);
            if(fileInputRef.current) {
                fileInputRef.current.value = "";
            }
        }
    };

    const handleDelete = async (attachmentId: number) => {
        if (!window.confirm('Are you sure you want to delete this attachment? This action cannot be undone.')) return;
        try {
            await api.delete(`/api/attachments/${attachmentId}`);
            fetchAttachments(); // Refresh the list
        } catch (error) {
            console.error("Error deleting attachment:", error);
        }
    };
    
    const handleDownload = (attachmentId: number) => {
        // Use the base URL from the api client to construct the full download URL
        const downloadUrl = `${api.defaults.baseURL}/attachments/${attachmentId}/download`;
        window.open(downloadUrl, '_blank');
    };

    return (
        <Card className="mt-6">
            <CardHeader>
                <CardTitle className="flex items-center text-xl">
                    <Paperclip className="mr-2 h-5 w-5" />
                    Attachments
                </CardTitle>
            </CardHeader>
            <CardContent>
                {loading ? (
                    <div className="flex justify-center"><Spinner /></div>
                ) : (
                    <div className="space-y-3">
                        {attachments.map(att => (
                            <div key={att.id} className="flex items-center justify-between p-2 rounded-md border">
                                <div className="truncate">
                                    <p className="font-medium truncate" title={att.file_name}>{att.file_name}</p>
                                    <p className="text-sm text-gray-500">{formatBytes(att.file_size)}</p>
                                </div>
                                <div className="flex items-center space-x-2 ml-2">
                                    <Button variant="outline" size="icon" onClick={() => handleDownload(att.id)}>
                                        <Download className="h-4 w-4" />
                                    </Button>
                                    {isAdmin() && (
                                        <Button variant="destructive" size="icon" onClick={() => handleDelete(att.id)}>
                                            <Trash2 className="h-4 w-4" />
                                        </Button>
                                    )}
                                </div>
                            </div>
                        ))}
                         {attachments.length === 0 && <p className="text-center text-gray-500 py-4">No attachments yet.</p>}
                    </div>
                )}
                {isAdmin() && (
                    <div className="mt-4 border-t pt-4">
                        <label htmlFor="file-upload" className="block text-sm font-medium text-gray-700 mb-2">
                            Upload a new file
                        </label>
                        <div className="flex items-center space-x-2">
                            <Input 
                                id="file-upload" 
                                type="file" 
                                ref={fileInputRef}
                                onChange={handleUpload} 
                                disabled={uploading}
                                className="flex-grow"
                            />
                            <Button onClick={() => fileInputRef.current?.click()} disabled={uploading}>
                                {uploading ? (
                                    <div className="mr-2 h-4 w-4 flex items-center justify-center"><Spinner /></div>
                                ) : (
                                    <UploadCloud className="mr-2 h-4 w-4"/>
                                )}
                                Upload
                            </Button>
                        </div>
                        {uploading && <p className="text-sm text-gray-500 mt-2">Uploading, please wait...</p>}
                    </div>
                )}
            </CardContent>
        </Card>
    );
}
