import { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Calendar } from '@/components/ui/calendar';
import { cn } from '@/lib/utils';
import { Calendar as CalendarIcon, X } from 'lucide-react';
import { format } from 'date-fns';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

interface FilterProps {
    onFilterChange: (filters: any) => void;
    initialFilters: any;
}

export function VulnerabilityFilters({ onFilterChange, initialFilters }: FilterProps) {
    const [searchTerm, setSearchTerm] = useState(initialFilters.search || '');
    const [severity, setSeverity] = useState(initialFilters.severity || '');
    const [status, setStatus] = useState(initialFilters.status || '');
    const [dateFrom, setDateFrom] = useState<Date | undefined>(initialFilters.dateFrom ? new Date(initialFilters.dateFrom) : undefined);
    const [dateTo, setDateTo] = useState<Date | undefined>(initialFilters.dateTo ? new Date(initialFilters.dateTo) : undefined);

    const handleFilter = () => {
        onFilterChange({
            search: searchTerm,
            severity,
            status,
            dateFrom: dateFrom ? format(dateFrom, 'yyyy-MM-dd') : undefined,
            dateTo: dateTo ? format(dateTo, 'yyyy-MM-dd') : undefined,
        });
    };

    const clearFilters = () => {
        setSearchTerm('');
        setSeverity('');
        setStatus('');
        setDateFrom(undefined);
        setDateTo(undefined);
        onFilterChange({});
    }

    return (
        <div className="p-4 border rounded-lg mb-4 flex flex-wrap items-end gap-4">
            <div className="grid gap-1.5">
                <label htmlFor="search" className="text-sm font-medium">Search</label>
                <Input id="search" placeholder="Search..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-40" />
            </div>
            <div className="grid gap-1.5">
                <label className="text-sm font-medium">Severity</label>
                <Select value={severity} onValueChange={setSeverity}>
                    <SelectTrigger className="w-40">
                        <SelectValue placeholder="Any Severity" />
                    </SelectTrigger>
                    <SelectContent>
                        <SelectItem value="">Any Severity</SelectItem>
                        <SelectItem value="Critical">Critical</SelectItem>
                        <SelectItem value="High">High</SelectItem>
                        <SelectItem value="Medium">Medium</SelectItem>
                        <SelectItem value="Low">Low</SelectItem>
                        <SelectItem value="Informational">Informational</SelectItem>
                    </SelectContent>
                </Select>
            </div>
            <div className="grid gap-1.5">
                <label className="text-sm font-medium">Status</label>
                <Select value={status} onValueChange={setStatus}>
                    <SelectTrigger className="w-40">
                        <SelectValue placeholder="Any Status" />
                    </SelectTrigger>
                    <SelectContent>
                        <SelectItem value="">Any Status</SelectItem>
                        <SelectItem value="Open">Open</SelectItem>
                        <SelectItem value="In Progress">In Progress</SelectItem>
                        <SelectItem value="Resolved">Resolved</SelectItem>
                        <SelectItem value="Closed">Closed</SelectItem>
                    </SelectContent>
                </Select>
            </div>
            <div className="grid gap-1.5">
                <label className="text-sm font-medium">From</label>
                <Popover>
                    <PopoverTrigger asChild>
                        <Button variant="outline" className={cn("w-[240px] justify-start text-left font-normal", !dateFrom && "text-muted-foreground")}>
                            <CalendarIcon className="mr-2 h-4 w-4" />
                            {dateFrom ? format(dateFrom, 'PPP') : <span>Pick a date</span>}
                        </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                        <Calendar mode="single" selected={dateFrom} onSelect={setDateFrom} initialFocus />
                    </PopoverContent>
                </Popover>
            </div>
            <div className="grid gap-1.5">
                <label className="text-sm font-medium">To</label>
                <Popover>
                    <PopoverTrigger asChild>
                        <Button variant="outline" className={cn("w-[240px] justify-start text-left font-normal", !dateTo && "text-muted-foreground")}>
                            <CalendarIcon className="mr-2 h-4 w-4" />
                            {dateTo ? format(dateTo, 'PPP') : <span>Pick a date</span>}
                        </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                        <Calendar mode="single" selected={dateTo} onSelect={setDateTo} initialFocus />
                    </PopoverContent>
                </Popover>
            </div>
            <Button onClick={handleFilter}>Filter</Button>
            <Button variant="ghost" onClick={clearFilters}><X className="mr-2 h-4 w-4"/>Clear</Button>
        </div>
    );
}
